{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","REACT_APP_APP_ID","firestore","App","useState","input","setInput","messages","setMessages","setusername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","alt","FormControl","Input","placeholder","type","value","onChange","event","target","IconButton","disabled","onClick","add","timestamp","FieldValue","serverTimestamp","preventDefault","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gVAoBeA,G,MAhBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACtBC,EADmD,EAApBC,WACTF,EAAQE,SACpC,OACE,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,iBAC7C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,mBAAqB,qBAC7C,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,QAAQC,QAAQ,KAAKC,UAAU,OAC7CR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,OAAuD,IACvDF,EAAQA,gB,iBCENU,EAZKC,IAASC,cAAc,CACzCC,OAAQC,6CACRC,WAAYD,8CACZE,YAAaF,kDACbG,UAAW,2BACXC,cAAeJ,uCACfK,kBAAmBL,kBACnBM,MAAON,gcAAYO,mBAGEC,Y,iCCsERC,MAxEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNtB,EAHM,KAGI2B,EAHJ,KA6Bb,OAxBAC,qBAAU,WACRpB,EAAGqB,WAAW,YACXC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXN,EACEM,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAAEC,GAAID,EAAIC,GAAItC,QAASqC,EAAIE,iBAG5D,IAEHT,qBAAU,WACRD,EAAYW,OAAO,sBAClB,IAaD,yBAAKrC,UAAU,OACb,yBACEsC,IAAI,6FACJC,IAAI,cAEN,yBAAKvC,UAAU,iBACb,yCACA,mFACA,uCAAaD,EAAb,gBACA,0BAAMC,UAAU,YACd,kBAACwC,EAAA,EAAD,CAAaxC,UAAU,mBACrB,kBAACyC,EAAA,EAAD,aACEzC,UAAU,YACV0C,YAAY,oBACZC,KAAK,OACLC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAWvB,EAASuB,EAAMC,OAAOH,SAL7C,cAMc,uBAGd,kBAACI,EAAA,EAAD,CACEhD,UAAU,iBACViD,UAAW3B,EACXjB,QAAQ,YACRD,MAAM,UACNuC,KAAK,SACLO,QArCS,SAACJ,GACpBvC,EAAGqB,WAAW,YAAYuB,IAAI,CAC5BtD,QAASyB,EACTvB,SAAUA,EACVqD,UAAW5C,IAASW,UAAUkC,WAAWC,oBAE3C/B,EAAS,IACTuB,EAAMS,mBAgCI,kBAAC,IAAD,SAIN,kBAAC,IAAD,KACG/B,EAASS,KAAI,YAAsB,IAAnBE,EAAkB,EAAlBA,GAAItC,EAAc,EAAdA,QACnB,OAAO,kBAAC,EAAD,CAAS2D,IAAKrB,EAAIpC,SAAUA,EAAUF,QAASA,WC9D9C4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7E,c","file":"static/js/main.518cd584.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./Message.css\";\r\n\r\nconst Message = forwardRef(({ message, username }, ref) => {\r\n  const isUser = username === message.username;\r\n  return (\r\n    <div ref={ref} className={`message ${isUser && \"message_user\"}`}>\r\n      <Card className={isUser ? \"message_userCard\" : \"message_guestCard\"}>\r\n        <CardContent>\r\n          <Typography color='white' variant='h5' component='h2'>\r\n            {!isUser && `${message.username || \"Unknown User\"} : `}{\" \"}\r\n            {message.message}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Message;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: \"facebook-messanger-9ff01\",\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDERS_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Button, FormControl, InputLabel, Input } from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport Flipmove from \"react-flip-move\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { IconButton } from \"@material-ui/core\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [username, setusername] = useState(\"\");\n\n  useEffect(() => {\n    db.collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setMessages(\n          snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() }))\n        );\n      });\n  }, []);\n\n  useEffect(() => {\n    setusername(prompt(\"enter your name\"));\n  }, []);\n\n  const inputHandler = (event) => {\n    db.collection(\"messages\").add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setInput(\"\");\n    event.preventDefault();\n  };\n\n  return (\n    <div className='App'>\n      <img\n        src='https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100'\n        alt='messanger'\n      />\n      <div className='Input_Message'>\n        <h1>Messanger</h1>\n        <h1>Will store the username and the data you typed here</h1>\n        <h2>welcome {username} to the Chat</h2>\n        <form className='App_form'>\n          <FormControl className='app_formControl'>\n            <Input\n              className='app_input'\n              placeholder='Ente a message...'\n              type='text'\n              value={input}\n              onChange={(event) => setInput(event.target.value)}\n              placeholder='enter your message'\n            />\n\n            <IconButton\n              className='app_iconButton'\n              disabled={!input}\n              variant='contained'\n              color='primary'\n              type='submit'\n              onClick={inputHandler}\n            >\n              <SendIcon />\n            </IconButton>\n          </FormControl>\n        </form>\n        <Flipmove>\n          {messages.map(({ id, message }) => {\n            return <Message key={id} username={username} message={message} />;\n          })}\n        </Flipmove>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}